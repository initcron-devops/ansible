#!/usr/bin/python

import re
import shlex
import syslog

path = '/root/Downloads/'


# Function used for executing commands.
def execute_command(cmd, module):
    #if debug:
        syslog.syslog("execute_command(): cmd = %s" % cmd)
    # Break command line into arguments.
    # This makes run_command() use shell=False which we need to not cause shell
    # expansion of special characters like '*'.
        cmd_args = shlex.split(cmd)
        return module.run_command(cmd_args)



# Function used to install package.
def package_present(name, module):

        install_cmd = '/sbin/upgradepkg --install-new'

        # Install the package
        (rc, stdout, stderr) = execute_command("%s %s%s" % (install_cmd, path, name), module)

            #	rc=1

        return (rc, stderr)


# Function used to remove package.
def package_absent(name, module):

        remove_cmd = '/sbin/removepkg'

        # Remove the package
        (rc, stdout, stderr) = execute_command("%s %s "% (remove_cmd, name), module)

        return (rc, stderr)


# Main control flow

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name = dict(required=True),
            state = dict(required=True, choices=['present','absent','latest']),
        ),
#        supports_check_mode = True
    )

    name = module.params['name']
    state = module.params['state']

    rc = 0
    stdout = ''
    stderr = ''
    dpath = ''
    result = {}
    result['name'] = name
    result['state'] = state



    # Perform requested action.
    if state in ['present','latest']:
        (rc, changed) = package_present(name, module)
    elif state in ['absent']:
        (rc, changed) = package_absent(name, module)

    if rc != 0:
        if stderr:
            module.fail_json(msg=stderr)
        else:
            module.fail_json(msg=stdout)

    result['changed'] = changed

    module.exit_json(**result)

# import module snippets
from ansible.module_utils.basic import *
main()




