#!/usr/bin/python


DOCUMENTATION = '''
---
module: slackware_pkgtools
author: 
version_added: 
short_description: Manage packages on Slackware.
description:
    - Manage packages on Slackware using the pkg tools.
options:
    name:
        required: true
        description:
        - Name of the package.
    path:
        required: true
        description:
        - Path where the package is stored.
    state:
        required: true
        choices: [ present, latest, absent ]
        description:
          - C(present) will make sure the package is installed.
            C(latest) will make sure the latest version of the package is installed.
            C(absent) will make sure the specified package is not installed.
'''


EXAMPLES = '''
# Make sure python is installed
- slackware_pkgtools: name=python-2.7.5-i486-1.txz path=/Downloads/ state=present

# Make sure python is the latest version
- slackware_pkgtools: name=python-2.7.5-i486-1.txz path=/Downloads/ state=latest

# Make sure python is not installed
- slackware_pkgtools: name=python-2.7.5-i486-1.txz state=absent
'''


import re
import shlex
import syslog
import os


# Function used for executing commands.
def execute_command(cmd, module):
    #if debug:
        syslog.syslog("execute_command(): cmd = %s" % cmd)
    # Break command line into arguments.
    # This makes run_command() use shell=False which we need to not cause shell
    # expansion of special characters like '*'.
        cmd_args = shlex.split(cmd)
        return module.run_command(cmd_args)


#Function used to check package status
def package_check(name, module):

	pkg_path = 'ls /var/log/packages/'
	var = name
	pckg_name,pckg_extension = os.path.splitext(var)
	(rc, stdout, stderr) = execute_command("%s%s" % (pkg_path, pckg_name), module)

        return (rc, stderr)


# Function used to install package.
def package_present(name, path, module):

        install_cmd = '/sbin/installpkg'

        # Install the package
        (rc, stdout, stderr) = execute_command("%s %s%s" % (install_cmd, path, name), module)

        return (rc, stderr)



# Function used to upgrade package.
def package_latest(name, path, module):

        upgrade_cmd = '/sbin/upgradepkg'

        # Install the package
        (rc, stdout, stderr) = execute_command("%s %s%s" % (upgrade_cmd, path, name), module)

        return (rc, stderr)


# Function used to remove package.
def package_absent(name, module):

        remove_cmd = '/sbin/removepkg'

        # Remove the package
        (rc, stdout, stderr) = execute_command("%s %s "% (remove_cmd, name), module)

        return (rc, stderr)


# Main control flow

def main():
    module = AnsibleModule(
        argument_spec = dict(
            name = dict(required=True),
	    path = dict(required=True),
            state = dict(required=True, choices=['present','absent','latest','check']),
        ),
#        supports_check_mode = True
    )

    name = module.params['name']
    path = module.params['path']	
    state = module.params['state']

    rc = 0
    stdout = ''
    stderr = ''
    dpath = ''
    result = {}
    result['name'] = name
    result['path'] = path
    result['state'] = state
	



    # Perform requested action.
    if state in ['present']:
        (rc, changed) = package_check(name, module)
	if rc != 0 :		
        	(rc, changed) = package_present(name, path, module)
    elif state in ['latest']:
        (rc, changed) = package_latest(name, path, module)
    elif state in ['absent']:
        (rc, changed) = package_absent(name, module)
    elif state in ['check']:
        (rc, changed) = package_check(name, module)
    else:
	module.exit_json(changed=False, msg="check_state (No condition satisfied)")
     	module.exit_json(**result)



    if rc != 0:
        if stderr:
            module.fail_json(msg=stderr)
        else:
            module.fail_json(msg= "Package does not exists")

    result['changed'] = changed

    module.exit_json(**result)

# import module snippets
from ansible.module_utils.basic import *
main()




